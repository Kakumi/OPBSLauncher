name: Build

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    permissions:
      contents: write

    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install Dependencies
        run: npm ci
        shell: bash

      - name: Build
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm run dist
        shell: bash

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-${{ runner.os }}
          path: |
            dist/**/*.exe
            dist/**/*.dmg
            dist/**/*.AppImage

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read version from package.json
        id: get-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "✅ Version : $VERSION"
          echo "TAG=v$VERSION" >> $GITHUB_ENV

      - name: Check if tag already exists
        id: check-tag
        run: |
          if git ls-remote --tags origin | grep -q "refs/tags/${{ env.TAG }}"; then
            echo "❌ La version existe"
            echo "CREATE_RELEASE=false" >> $GITHUB_ENV
          else
            echo "✅ La version n'existe pas"
            echo "CREATE_RELEASE=true" >> $GITHUB_ENV
          fi

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: List downloaded files
        run: find ./artifacts -type f

      - name: Create GitHub Release
        if: env.CREATE_RELEASE == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ env.TAG }}
        run: |
          gh release create "$TAG" ./artifacts/**/*.* \
            --title "$TAG" \
            --notes "🧪 Release created automatically at $(date '+%Y-%m-%d %H:%M:%S')."
